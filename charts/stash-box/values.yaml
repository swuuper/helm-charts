# Default values for stash-box.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  box:
    registry: docker.io
    repository: stashapp/stash-box
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    # On latest for now as there are no tagged releases
    tag: "latest@sha256:2117a1cd508bb3e367d9754914968bf1aaf29df3dc46313a56c135612286f01c"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 9998

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}
# kubernetes.io/arch: amd64 # In case you have a mixed cluster of ARM and AMD64 worker nodes

tolerations: []

affinity: {}

postgres:
  enabled: false
  credentials: null
#    username: sbox-user
#    usernameFromSecret:
#       name: box.box-db.credentials.postgresql.acid.zalan.do
#       key: username
#    passwordFromSecret:
#       name: box.box-db.credentials.postgresql.acid.zalan.do
#       key: password
#    password: myS3cureP4a55word
#    hostname: sbox-db
#    database: sbox

persistence:
  enabled: true
  volumes:
    config:
      # existingClaim: 'some-pvc-name'
      size: 8Gi
      accessMode: ReadWriteOnce
      # storageClass: ''
      location: /root/.stash-box

configuration:
  secrets:
    jwt: null
    session: null
  enabled: true
  override: false
  # Init script for Box, it will create the required configuration to
  # connect to the Postgres Database.
  # Will only be used when `configuration.enabled` is set to true
  initScript: |-
    #!/bin/bash
    set -e
    
    echo $POSTGRES_USER
    echo $POSTGRES_PASSWORD


    # Check if the configuration file exists {{ .Values.configuration.override }}
    {{- if not .Values.configuration.override }}
    if [ ! -f {{ .Values.persistence.volumes.config.location }}/stash-box-config.yml ]; then
    {{- end }}
      echo "Configuration file not found, creating a new one in {{ .Values.persistence.volumes.config.location }}/stash-box-config.yml"
      mkdir -p {{ .Values.persistence.volumes.config.location }}
      cp /templates/stash-box-config.yml {{ .Values.persistence.volumes.config.location }}/stash-box-config.yml.source
      echo "Copied config file, filling environment variables"
      while IFS= read -r line; do eval "echo \"$line\""; done < {{ .Values.persistence.volumes.config.location }}/stash-box-config.yml.source > {{ .Values.persistence.volumes.config.location }}/stash-box-config.yml
    {{- if not .Values.configuration.override }}
    fi
    {{- end }}
    
    echo "Init script done."

  templateConfig: |
    database: ${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}/${POSTGRES_DATABASE}
    jwt_secret_key: ${SECRET_JWT_KEY}
    session_store_key: ${SECRET_SESSION_STORE}

  initContainer:
    name: create-config
    image: mikefarah/yq:4
    securityContext:
      runAsUser: 0
    command: [ "/bin/sh", "-c" ]
    args:
      - /bin/sh /mnt/init/init.sh
    volumeMounts:
      - name: init
        mountPath: /mnt/init/init.sh
        subPath: init.sh
      - name: templates
        mountPath: /templates